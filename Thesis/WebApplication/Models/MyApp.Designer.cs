//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 14/4/2017 20:45:10
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MyappContext
{

    [DatabaseAttribute(Name = "myapp")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class MyappDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MyappDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCliDepartamento(CliDepartamento instance);
        partial void UpdateCliDepartamento(CliDepartamento instance);
        partial void DeleteCliDepartamento(CliDepartamento instance);
        partial void InsertCliEmpresa(CliEmpresa instance);
        partial void UpdateCliEmpresa(CliEmpresa instance);
        partial void DeleteCliEmpresa(CliEmpresa instance);
        partial void InsertCliEquipo(CliEquipo instance);
        partial void UpdateCliEquipo(CliEquipo instance);
        partial void DeleteCliEquipo(CliEquipo instance);
        partial void InsertCliTipoequipo(CliTipoequipo instance);
        partial void UpdateCliTipoequipo(CliTipoequipo instance);
        partial void DeleteCliTipoequipo(CliTipoequipo instance);
        partial void InsertCliUsuario(CliUsuario instance);
        partial void UpdateCliUsuario(CliUsuario instance);
        partial void DeleteCliUsuario(CliUsuario instance);
        partial void InsertComUsuario(ComUsuario instance);
        partial void UpdateComUsuario(ComUsuario instance);
        partial void DeleteComUsuario(ComUsuario instance);
        partial void InsertCompBitacora(CompBitacora instance);
        partial void UpdateCompBitacora(CompBitacora instance);
        partial void DeleteCompBitacora(CompBitacora instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);

        #endregion

        public MyappDataContext() :
        base(GetConnectionString("MyappDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MyappDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MyappDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public MyappDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MyappDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MyappDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MyappDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<CliDepartamento> CliDepartamentos
        {
            get
            {
                return this.GetTable<CliDepartamento>();
            }
        }

        public Devart.Data.Linq.Table<CliEmpresa> CliEmpresas
        {
            get
            {
                return this.GetTable<CliEmpresa>();
            }
        }

        public Devart.Data.Linq.Table<CliEquipo> CliEquipos
        {
            get
            {
                return this.GetTable<CliEquipo>();
            }
        }

        public Devart.Data.Linq.Table<CliTipoequipo> CliTipoequipos
        {
            get
            {
                return this.GetTable<CliTipoequipo>();
            }
        }

        public Devart.Data.Linq.Table<CliUsuario> CliUsuarios
        {
            get
            {
                return this.GetTable<CliUsuario>();
            }
        }

        public Devart.Data.Linq.Table<ComUsuario> ComUsuarios
        {
            get
            {
                return this.GetTable<ComUsuario>();
            }
        }

        public Devart.Data.Linq.Table<CompBitacora> CompBitacoras
        {
            get
            {
                return this.GetTable<CompBitacora>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }
    }
}

namespace MyappContext
{

    /// <summary>
    /// There are no comments for MyappContext.CliDepartamento in the schema.
    /// </summary>
    [Table(Name = @"myapp.cli_departamento")]
    public partial class CliDepartamento : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCliDepartamento;

        private string _CliDescripcion;
        #pragma warning restore 0649

        private EntitySet<CliUsuario> _CliUsuarios;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCliDepartamentoChanging(int value);
        partial void OnIdCliDepartamentoChanged();
        partial void OnCliDescripcionChanging(string value);
        partial void OnCliDescripcionChanged();
        #endregion

        public CliDepartamento()
        {
            this._CliUsuarios = new EntitySet<CliUsuario>(new Action<CliUsuario>(this.attach_CliUsuarios), new Action<CliUsuario>(this.detach_CliUsuarios));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCliDepartamento in the schema.
        /// </summary>
        [Column(Name = @"idCli_Departamento", Storage = "_IdCliDepartamento", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCliDepartamento
        {
            get
            {
                return this._IdCliDepartamento;
            }
            set
            {
                if (this._IdCliDepartamento != value)
                {
                    this.OnIdCliDepartamentoChanging(value);
                    this.SendPropertyChanging();
                    this._IdCliDepartamento = value;
                    this.SendPropertyChanged("IdCliDepartamento");
                    this.OnIdCliDepartamentoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliDescripcion in the schema.
        /// </summary>
        [Column(Name = @"Cli_Descripcion", Storage = "_CliDescripcion", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliDescripcion
        {
            get
            {
                return this._CliDescripcion;
            }
            set
            {
                if (this._CliDescripcion != value)
                {
                    this.OnCliDescripcionChanging(value);
                    this.SendPropertyChanging();
                    this._CliDescripcion = value;
                    this.SendPropertyChanged("CliDescripcion");
                    this.OnCliDescripcionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliUsuarios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CliDepartamento_CliUsuario", Storage="_CliUsuarios", ThisKey="IdCliDepartamento", OtherKey="CliDepartamentoIdCliDepartamento", DeleteRule="NO ACTION")]
        public EntitySet<CliUsuario> CliUsuarios
        {
            get
            {
                return this._CliUsuarios;
            }
            set
            {
                this._CliUsuarios.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CliUsuarios(CliUsuario entity)
        {
            this.SendPropertyChanging("CliUsuarios");
            entity.CliDepartamento1 = this;
        }
    
        private void detach_CliUsuarios(CliUsuario entity)
        {
            this.SendPropertyChanging("CliUsuarios");
            entity.CliDepartamento1 = null;
        }
    }

    /// <summary>
    /// There are no comments for MyappContext.CliEmpresa in the schema.
    /// </summary>
    [Table(Name = @"myapp.cli_empresa")]
    public partial class CliEmpresa : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCliEmpresa;

        private string _CliNombre;

        private string _CliRuc;

        private string _CliDireccion;

        private string _CliTel;

        private string _CliCiudad;
        #pragma warning restore 0649

        private EntitySet<CliUsuario> _CliUsuarios;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCliEmpresaChanging(int value);
        partial void OnIdCliEmpresaChanged();
        partial void OnCliNombreChanging(string value);
        partial void OnCliNombreChanged();
        partial void OnCliRucChanging(string value);
        partial void OnCliRucChanged();
        partial void OnCliDireccionChanging(string value);
        partial void OnCliDireccionChanged();
        partial void OnCliTelChanging(string value);
        partial void OnCliTelChanged();
        partial void OnCliCiudadChanging(string value);
        partial void OnCliCiudadChanged();
        #endregion

        public CliEmpresa()
        {
            this._CliUsuarios = new EntitySet<CliUsuario>(new Action<CliUsuario>(this.attach_CliUsuarios), new Action<CliUsuario>(this.detach_CliUsuarios));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCliEmpresa in the schema.
        /// </summary>
        [Column(Name = @"idCli_Empresa", Storage = "_IdCliEmpresa", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCliEmpresa
        {
            get
            {
                return this._IdCliEmpresa;
            }
            set
            {
                if (this._IdCliEmpresa != value)
                {
                    this.OnIdCliEmpresaChanging(value);
                    this.SendPropertyChanging();
                    this._IdCliEmpresa = value;
                    this.SendPropertyChanged("IdCliEmpresa");
                    this.OnIdCliEmpresaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliNombre in the schema.
        /// </summary>
        [Column(Name = @"Cli_Nombre", Storage = "_CliNombre", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliNombre
        {
            get
            {
                return this._CliNombre;
            }
            set
            {
                if (this._CliNombre != value)
                {
                    this.OnCliNombreChanging(value);
                    this.SendPropertyChanging();
                    this._CliNombre = value;
                    this.SendPropertyChanged("CliNombre");
                    this.OnCliNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliRuc in the schema.
        /// </summary>
        [Column(Name = @"Cli_Ruc", Storage = "_CliRuc", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliRuc
        {
            get
            {
                return this._CliRuc;
            }
            set
            {
                if (this._CliRuc != value)
                {
                    this.OnCliRucChanging(value);
                    this.SendPropertyChanging();
                    this._CliRuc = value;
                    this.SendPropertyChanged("CliRuc");
                    this.OnCliRucChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliDireccion in the schema.
        /// </summary>
        [Column(Name = @"Cli_Direccion", Storage = "_CliDireccion", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliDireccion
        {
            get
            {
                return this._CliDireccion;
            }
            set
            {
                if (this._CliDireccion != value)
                {
                    this.OnCliDireccionChanging(value);
                    this.SendPropertyChanging();
                    this._CliDireccion = value;
                    this.SendPropertyChanged("CliDireccion");
                    this.OnCliDireccionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliTel in the schema.
        /// </summary>
        [Column(Name = @"Cli_Tel", Storage = "_CliTel", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliTel
        {
            get
            {
                return this._CliTel;
            }
            set
            {
                if (this._CliTel != value)
                {
                    this.OnCliTelChanging(value);
                    this.SendPropertyChanging();
                    this._CliTel = value;
                    this.SendPropertyChanged("CliTel");
                    this.OnCliTelChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliCiudad in the schema.
        /// </summary>
        [Column(Name = @"Cli_Ciudad", Storage = "_CliCiudad", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliCiudad
        {
            get
            {
                return this._CliCiudad;
            }
            set
            {
                if (this._CliCiudad != value)
                {
                    this.OnCliCiudadChanging(value);
                    this.SendPropertyChanging();
                    this._CliCiudad = value;
                    this.SendPropertyChanged("CliCiudad");
                    this.OnCliCiudadChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliUsuarios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CliEmpresa_CliUsuario", Storage="_CliUsuarios", ThisKey="IdCliEmpresa", OtherKey="CliEmpresaIdCliEmpresa", DeleteRule="NO ACTION")]
        public EntitySet<CliUsuario> CliUsuarios
        {
            get
            {
                return this._CliUsuarios;
            }
            set
            {
                this._CliUsuarios.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CliUsuarios(CliUsuario entity)
        {
            this.SendPropertyChanging("CliUsuarios");
            entity.CliEmpresa = this;
        }
    
        private void detach_CliUsuarios(CliUsuario entity)
        {
            this.SendPropertyChanging("CliUsuarios");
            entity.CliEmpresa = null;
        }
    }

    /// <summary>
    /// There are no comments for MyappContext.CliEquipo in the schema.
    /// </summary>
    [Table(Name = @"myapp.cli_equipo")]
    public partial class CliEquipo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCliEquipo;

        private string _CliMarca;

        private string _CliModelo;

        private string _CliDiscoDuro;

        private string _CliRam;

        private string _CliProcesador;

        private System.Nullable<bool> _CliTipoEquipo;

        private int _CliTipoEquipoIdCliTipoEquipo;
        #pragma warning restore 0649

        private EntityRef<CliTipoequipo> _CliTipoequipo;

        private EntitySet<CliUsuario> _CliUsuarios;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCliEquipoChanging(int value);
        partial void OnIdCliEquipoChanged();
        partial void OnCliMarcaChanging(string value);
        partial void OnCliMarcaChanged();
        partial void OnCliModeloChanging(string value);
        partial void OnCliModeloChanged();
        partial void OnCliDiscoDuroChanging(string value);
        partial void OnCliDiscoDuroChanged();
        partial void OnCliRamChanging(string value);
        partial void OnCliRamChanged();
        partial void OnCliProcesadorChanging(string value);
        partial void OnCliProcesadorChanged();
        partial void OnCliTipoEquipoChanging(System.Nullable<bool> value);
        partial void OnCliTipoEquipoChanged();
        partial void OnCliTipoEquipoIdCliTipoEquipoChanging(int value);
        partial void OnCliTipoEquipoIdCliTipoEquipoChanged();
        #endregion

        public CliEquipo()
        {
            this._CliTipoequipo  = default(EntityRef<CliTipoequipo>);
            this._CliUsuarios = new EntitySet<CliUsuario>(new Action<CliUsuario>(this.attach_CliUsuarios), new Action<CliUsuario>(this.detach_CliUsuarios));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCliEquipo in the schema.
        /// </summary>
        [Column(Name = @"idCli_Equipo", Storage = "_IdCliEquipo", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCliEquipo
        {
            get
            {
                return this._IdCliEquipo;
            }
            set
            {
                if (this._IdCliEquipo != value)
                {
                    this.OnIdCliEquipoChanging(value);
                    this.SendPropertyChanging();
                    this._IdCliEquipo = value;
                    this.SendPropertyChanged("IdCliEquipo");
                    this.OnIdCliEquipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliMarca in the schema.
        /// </summary>
        [Column(Name = @"Cli_Marca", Storage = "_CliMarca", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliMarca
        {
            get
            {
                return this._CliMarca;
            }
            set
            {
                if (this._CliMarca != value)
                {
                    this.OnCliMarcaChanging(value);
                    this.SendPropertyChanging();
                    this._CliMarca = value;
                    this.SendPropertyChanged("CliMarca");
                    this.OnCliMarcaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliModelo in the schema.
        /// </summary>
        [Column(Name = @"Cli_Modelo", Storage = "_CliModelo", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliModelo
        {
            get
            {
                return this._CliModelo;
            }
            set
            {
                if (this._CliModelo != value)
                {
                    this.OnCliModeloChanging(value);
                    this.SendPropertyChanging();
                    this._CliModelo = value;
                    this.SendPropertyChanged("CliModelo");
                    this.OnCliModeloChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliDiscoDuro in the schema.
        /// </summary>
        [Column(Name = @"Cli_DiscoDuro", Storage = "_CliDiscoDuro", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliDiscoDuro
        {
            get
            {
                return this._CliDiscoDuro;
            }
            set
            {
                if (this._CliDiscoDuro != value)
                {
                    this.OnCliDiscoDuroChanging(value);
                    this.SendPropertyChanging();
                    this._CliDiscoDuro = value;
                    this.SendPropertyChanged("CliDiscoDuro");
                    this.OnCliDiscoDuroChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliRam in the schema.
        /// </summary>
        [Column(Name = @"Cli_Ram", Storage = "_CliRam", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliRam
        {
            get
            {
                return this._CliRam;
            }
            set
            {
                if (this._CliRam != value)
                {
                    this.OnCliRamChanging(value);
                    this.SendPropertyChanging();
                    this._CliRam = value;
                    this.SendPropertyChanged("CliRam");
                    this.OnCliRamChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliProcesador in the schema.
        /// </summary>
        [Column(Name = @"Cli_Procesador", Storage = "_CliProcesador", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliProcesador
        {
            get
            {
                return this._CliProcesador;
            }
            set
            {
                if (this._CliProcesador != value)
                {
                    this.OnCliProcesadorChanging(value);
                    this.SendPropertyChanging();
                    this._CliProcesador = value;
                    this.SendPropertyChanged("CliProcesador");
                    this.OnCliProcesadorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliTipoEquipo in the schema.
        /// </summary>
        [Column(Name = @"Cli_TipoEquipo", Storage = "_CliTipoEquipo", DbType = "TINYINT(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CliTipoEquipo
        {
            get
            {
                return this._CliTipoEquipo;
            }
            set
            {
                if (this._CliTipoEquipo != value)
                {
                    this.OnCliTipoEquipoChanging(value);
                    this.SendPropertyChanging();
                    this._CliTipoEquipo = value;
                    this.SendPropertyChanged("CliTipoEquipo");
                    this.OnCliTipoEquipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliTipoEquipoIdCliTipoEquipo in the schema.
        /// </summary>
        [Column(Name = @"Cli_TipoEquipo_idCli_TipoEquipo", Storage = "_CliTipoEquipoIdCliTipoEquipo", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CliTipoEquipoIdCliTipoEquipo
        {
            get
            {
                return this._CliTipoEquipoIdCliTipoEquipo;
            }
            set
            {
                if (this._CliTipoEquipoIdCliTipoEquipo != value)
                {
                    if (this._CliTipoequipo.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCliTipoEquipoIdCliTipoEquipoChanging(value);
                    this.SendPropertyChanging();
                    this._CliTipoEquipoIdCliTipoEquipo = value;
                    this.SendPropertyChanged("CliTipoEquipoIdCliTipoEquipo");
                    this.OnCliTipoEquipoIdCliTipoEquipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliTipoequipo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CliTipoequipo_CliEquipo", Storage="_CliTipoequipo", ThisKey="CliTipoEquipoIdCliTipoEquipo", OtherKey="IdCliTipoEquipo", IsForeignKey=true)]
        public CliTipoequipo CliTipoequipo
        {
            get
            {
                return this._CliTipoequipo.Entity;
            }
            set
            {
                CliTipoequipo previousValue = this._CliTipoequipo.Entity;
                if ((previousValue != value) || (this._CliTipoequipo.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CliTipoequipo.Entity = null;
                        previousValue.CliEquipos.Remove(this);
                    }
                    this._CliTipoequipo.Entity = value;
                    if (value != null)
                    {
                        this._CliTipoEquipoIdCliTipoEquipo = value.IdCliTipoEquipo;
                        value.CliEquipos.Add(this);
                    }
                    else
                    {
                        this._CliTipoEquipoIdCliTipoEquipo = default(int);
                    }
                    this.SendPropertyChanged("CliTipoequipo");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliUsuarios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CliEquipo_CliUsuario", Storage="_CliUsuarios", ThisKey="IdCliEquipo", OtherKey="CliEquipoIdCliEquipo", DeleteRule="NO ACTION")]
        public EntitySet<CliUsuario> CliUsuarios
        {
            get
            {
                return this._CliUsuarios;
            }
            set
            {
                this._CliUsuarios.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CliUsuarios(CliUsuario entity)
        {
            this.SendPropertyChanging("CliUsuarios");
            entity.CliEquipo1 = this;
        }
    
        private void detach_CliUsuarios(CliUsuario entity)
        {
            this.SendPropertyChanging("CliUsuarios");
            entity.CliEquipo1 = null;
        }
    }

    /// <summary>
    /// There are no comments for MyappContext.CliTipoequipo in the schema.
    /// </summary>
    [Table(Name = @"myapp.cli_tipoequipo")]
    public partial class CliTipoequipo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCliTipoEquipo;

        private System.Nullable<bool> _CliLaptop;

        private System.Nullable<bool> _CliPc;
        #pragma warning restore 0649

        private EntitySet<CliEquipo> _CliEquipos;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCliTipoEquipoChanging(int value);
        partial void OnIdCliTipoEquipoChanged();
        partial void OnCliLaptopChanging(System.Nullable<bool> value);
        partial void OnCliLaptopChanged();
        partial void OnCliPcChanging(System.Nullable<bool> value);
        partial void OnCliPcChanged();
        #endregion

        public CliTipoequipo()
        {
            this._CliEquipos = new EntitySet<CliEquipo>(new Action<CliEquipo>(this.attach_CliEquipos), new Action<CliEquipo>(this.detach_CliEquipos));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCliTipoEquipo in the schema.
        /// </summary>
        [Column(Name = @"idCli_TipoEquipo", Storage = "_IdCliTipoEquipo", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCliTipoEquipo
        {
            get
            {
                return this._IdCliTipoEquipo;
            }
            set
            {
                if (this._IdCliTipoEquipo != value)
                {
                    this.OnIdCliTipoEquipoChanging(value);
                    this.SendPropertyChanging();
                    this._IdCliTipoEquipo = value;
                    this.SendPropertyChanged("IdCliTipoEquipo");
                    this.OnIdCliTipoEquipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliLaptop in the schema.
        /// </summary>
        [Column(Name = @"Cli_Laptop", Storage = "_CliLaptop", DbType = "TINYINT(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CliLaptop
        {
            get
            {
                return this._CliLaptop;
            }
            set
            {
                if (this._CliLaptop != value)
                {
                    this.OnCliLaptopChanging(value);
                    this.SendPropertyChanging();
                    this._CliLaptop = value;
                    this.SendPropertyChanged("CliLaptop");
                    this.OnCliLaptopChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliPc in the schema.
        /// </summary>
        [Column(Name = @"Cli_Pc", Storage = "_CliPc", DbType = "TINYINT(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CliPc
        {
            get
            {
                return this._CliPc;
            }
            set
            {
                if (this._CliPc != value)
                {
                    this.OnCliPcChanging(value);
                    this.SendPropertyChanging();
                    this._CliPc = value;
                    this.SendPropertyChanged("CliPc");
                    this.OnCliPcChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliEquipos in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CliTipoequipo_CliEquipo", Storage="_CliEquipos", ThisKey="IdCliTipoEquipo", OtherKey="CliTipoEquipoIdCliTipoEquipo", DeleteRule="NO ACTION")]
        public EntitySet<CliEquipo> CliEquipos
        {
            get
            {
                return this._CliEquipos;
            }
            set
            {
                this._CliEquipos.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CliEquipos(CliEquipo entity)
        {
            this.SendPropertyChanging("CliEquipos");
            entity.CliTipoequipo = this;
        }
    
        private void detach_CliEquipos(CliEquipo entity)
        {
            this.SendPropertyChanging("CliEquipos");
            entity.CliTipoequipo = null;
        }
    }

    /// <summary>
    /// There are no comments for MyappContext.CliUsuario in the schema.
    /// </summary>
    [Table(Name = @"myapp.cli_usuario")]
    public partial class CliUsuario : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCliUsuario;

        private string _CliNoombre;

        private string _CliDepartamento;

        private string _CliEquipo;

        private int _CliDepartamentoIdCliDepartamento;

        private int _CliEquipoIdCliEquipo;

        private int _CliEmpresaIdCliEmpresa;
        #pragma warning restore 0649

        private EntityRef<CliDepartamento> _CliDepartamento1;

        private EntityRef<CliEmpresa> _CliEmpresa;

        private EntityRef<CliEquipo> _CliEquipo1;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCliUsuarioChanging(int value);
        partial void OnIdCliUsuarioChanged();
        partial void OnCliNoombreChanging(string value);
        partial void OnCliNoombreChanged();
        partial void OnCliDepartamentoChanging(string value);
        partial void OnCliDepartamentoChanged();
        partial void OnCliEquipoChanging(string value);
        partial void OnCliEquipoChanged();
        partial void OnCliDepartamentoIdCliDepartamentoChanging(int value);
        partial void OnCliDepartamentoIdCliDepartamentoChanged();
        partial void OnCliEquipoIdCliEquipoChanging(int value);
        partial void OnCliEquipoIdCliEquipoChanged();
        partial void OnCliEmpresaIdCliEmpresaChanging(int value);
        partial void OnCliEmpresaIdCliEmpresaChanged();
        #endregion

        public CliUsuario()
        {
            this._CliDepartamento1  = default(EntityRef<CliDepartamento>);
            this._CliEmpresa  = default(EntityRef<CliEmpresa>);
            this._CliEquipo1  = default(EntityRef<CliEquipo>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCliUsuario in the schema.
        /// </summary>
        [Column(Name = @"idCli_Usuario", Storage = "_IdCliUsuario", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCliUsuario
        {
            get
            {
                return this._IdCliUsuario;
            }
            set
            {
                if (this._IdCliUsuario != value)
                {
                    this.OnIdCliUsuarioChanging(value);
                    this.SendPropertyChanging();
                    this._IdCliUsuario = value;
                    this.SendPropertyChanged("IdCliUsuario");
                    this.OnIdCliUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliNoombre in the schema.
        /// </summary>
        [Column(Name = @"Cli_noombre", Storage = "_CliNoombre", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliNoombre
        {
            get
            {
                return this._CliNoombre;
            }
            set
            {
                if (this._CliNoombre != value)
                {
                    this.OnCliNoombreChanging(value);
                    this.SendPropertyChanging();
                    this._CliNoombre = value;
                    this.SendPropertyChanged("CliNoombre");
                    this.OnCliNoombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliDepartamento in the schema.
        /// </summary>
        [Column(Name = @"Cli_Departamento", Storage = "_CliDepartamento", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliDepartamento
        {
            get
            {
                return this._CliDepartamento;
            }
            set
            {
                if (this._CliDepartamento != value)
                {
                    this.OnCliDepartamentoChanging(value);
                    this.SendPropertyChanging();
                    this._CliDepartamento = value;
                    this.SendPropertyChanged("CliDepartamento");
                    this.OnCliDepartamentoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliEquipo in the schema.
        /// </summary>
        [Column(Name = @"Cli_Equipo", Storage = "_CliEquipo", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CliEquipo
        {
            get
            {
                return this._CliEquipo;
            }
            set
            {
                if (this._CliEquipo != value)
                {
                    this.OnCliEquipoChanging(value);
                    this.SendPropertyChanging();
                    this._CliEquipo = value;
                    this.SendPropertyChanged("CliEquipo");
                    this.OnCliEquipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliDepartamentoIdCliDepartamento in the schema.
        /// </summary>
        [Column(Name = @"Cli_Departamento_idCli_Departamento", Storage = "_CliDepartamentoIdCliDepartamento", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CliDepartamentoIdCliDepartamento
        {
            get
            {
                return this._CliDepartamentoIdCliDepartamento;
            }
            set
            {
                if (this._CliDepartamentoIdCliDepartamento != value)
                {
                    if (this._CliDepartamento1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCliDepartamentoIdCliDepartamentoChanging(value);
                    this.SendPropertyChanging();
                    this._CliDepartamentoIdCliDepartamento = value;
                    this.SendPropertyChanged("CliDepartamentoIdCliDepartamento");
                    this.OnCliDepartamentoIdCliDepartamentoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliEquipoIdCliEquipo in the schema.
        /// </summary>
        [Column(Name = @"Cli_Equipo_idCli_Equipo", Storage = "_CliEquipoIdCliEquipo", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CliEquipoIdCliEquipo
        {
            get
            {
                return this._CliEquipoIdCliEquipo;
            }
            set
            {
                if (this._CliEquipoIdCliEquipo != value)
                {
                    if (this._CliEquipo1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCliEquipoIdCliEquipoChanging(value);
                    this.SendPropertyChanging();
                    this._CliEquipoIdCliEquipo = value;
                    this.SendPropertyChanged("CliEquipoIdCliEquipo");
                    this.OnCliEquipoIdCliEquipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliEmpresaIdCliEmpresa in the schema.
        /// </summary>
        [Column(Name = @"Cli_Empresa_idCli_Empresa", Storage = "_CliEmpresaIdCliEmpresa", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CliEmpresaIdCliEmpresa
        {
            get
            {
                return this._CliEmpresaIdCliEmpresa;
            }
            set
            {
                if (this._CliEmpresaIdCliEmpresa != value)
                {
                    if (this._CliEmpresa.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCliEmpresaIdCliEmpresaChanging(value);
                    this.SendPropertyChanging();
                    this._CliEmpresaIdCliEmpresa = value;
                    this.SendPropertyChanged("CliEmpresaIdCliEmpresa");
                    this.OnCliEmpresaIdCliEmpresaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliDepartamento1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CliDepartamento_CliUsuario", Storage="_CliDepartamento1", ThisKey="CliDepartamentoIdCliDepartamento", OtherKey="IdCliDepartamento", IsForeignKey=true)]
        public CliDepartamento CliDepartamento1
        {
            get
            {
                return this._CliDepartamento1.Entity;
            }
            set
            {
                CliDepartamento previousValue = this._CliDepartamento1.Entity;
                if ((previousValue != value) || (this._CliDepartamento1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CliDepartamento1.Entity = null;
                        previousValue.CliUsuarios.Remove(this);
                    }
                    this._CliDepartamento1.Entity = value;
                    if (value != null)
                    {
                        this._CliDepartamentoIdCliDepartamento = value.IdCliDepartamento;
                        value.CliUsuarios.Add(this);
                    }
                    else
                    {
                        this._CliDepartamentoIdCliDepartamento = default(int);
                    }
                    this.SendPropertyChanged("CliDepartamento1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliEmpresa in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CliEmpresa_CliUsuario", Storage="_CliEmpresa", ThisKey="CliEmpresaIdCliEmpresa", OtherKey="IdCliEmpresa", IsForeignKey=true)]
        public CliEmpresa CliEmpresa
        {
            get
            {
                return this._CliEmpresa.Entity;
            }
            set
            {
                CliEmpresa previousValue = this._CliEmpresa.Entity;
                if ((previousValue != value) || (this._CliEmpresa.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CliEmpresa.Entity = null;
                        previousValue.CliUsuarios.Remove(this);
                    }
                    this._CliEmpresa.Entity = value;
                    if (value != null)
                    {
                        this._CliEmpresaIdCliEmpresa = value.IdCliEmpresa;
                        value.CliUsuarios.Add(this);
                    }
                    else
                    {
                        this._CliEmpresaIdCliEmpresa = default(int);
                    }
                    this.SendPropertyChanged("CliEmpresa");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CliEquipo1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CliEquipo_CliUsuario", Storage="_CliEquipo1", ThisKey="CliEquipoIdCliEquipo", OtherKey="IdCliEquipo", IsForeignKey=true)]
        public CliEquipo CliEquipo1
        {
            get
            {
                return this._CliEquipo1.Entity;
            }
            set
            {
                CliEquipo previousValue = this._CliEquipo1.Entity;
                if ((previousValue != value) || (this._CliEquipo1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CliEquipo1.Entity = null;
                        previousValue.CliUsuarios.Remove(this);
                    }
                    this._CliEquipo1.Entity = value;
                    if (value != null)
                    {
                        this._CliEquipoIdCliEquipo = value.IdCliEquipo;
                        value.CliUsuarios.Add(this);
                    }
                    else
                    {
                        this._CliEquipoIdCliEquipo = default(int);
                    }
                    this.SendPropertyChanged("CliEquipo1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MyappContext.ComUsuario in the schema.
    /// </summary>
    [Table(Name = @"myapp.com_usuarios")]
    public partial class ComUsuario : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdComUsuarios;

        private string _ComNombre;

        private bool _ComRole;

        private int _RolesIdRoles;
        #pragma warning restore 0649

        private EntityRef<Role> _Role;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdComUsuariosChanging(int value);
        partial void OnIdComUsuariosChanged();
        partial void OnComNombreChanging(string value);
        partial void OnComNombreChanged();
        partial void OnComRoleChanging(bool value);
        partial void OnComRoleChanged();
        partial void OnRolesIdRolesChanging(int value);
        partial void OnRolesIdRolesChanged();
        #endregion

        public ComUsuario()
        {
            this._Role  = default(EntityRef<Role>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdComUsuarios in the schema.
        /// </summary>
        [Column(Name = @"idCom_Usuarios", Storage = "_IdComUsuarios", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdComUsuarios
        {
            get
            {
                return this._IdComUsuarios;
            }
            set
            {
                if (this._IdComUsuarios != value)
                {
                    this.OnIdComUsuariosChanging(value);
                    this.SendPropertyChanging();
                    this._IdComUsuarios = value;
                    this.SendPropertyChanged("IdComUsuarios");
                    this.OnIdComUsuariosChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComNombre in the schema.
        /// </summary>
        [Column(Name = @"Com_Nombre", Storage = "_ComNombre", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ComNombre
        {
            get
            {
                return this._ComNombre;
            }
            set
            {
                if (this._ComNombre != value)
                {
                    this.OnComNombreChanging(value);
                    this.SendPropertyChanging();
                    this._ComNombre = value;
                    this.SendPropertyChanged("ComNombre");
                    this.OnComNombreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComRole in the schema.
        /// </summary>
        [Column(Name = @"Com_Role", Storage = "_ComRole", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool ComRole
        {
            get
            {
                return this._ComRole;
            }
            set
            {
                if (this._ComRole != value)
                {
                    this.OnComRoleChanging(value);
                    this.SendPropertyChanging();
                    this._ComRole = value;
                    this.SendPropertyChanged("ComRole");
                    this.OnComRoleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RolesIdRoles in the schema.
        /// </summary>
        [Column(Name = @"Roles_idRoles", Storage = "_RolesIdRoles", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int RolesIdRoles
        {
            get
            {
                return this._RolesIdRoles;
            }
            set
            {
                if (this._RolesIdRoles != value)
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRolesIdRolesChanging(value);
                    this.SendPropertyChanging();
                    this._RolesIdRoles = value;
                    this.SendPropertyChanged("RolesIdRoles");
                    this.OnRolesIdRolesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_ComUsuario", Storage="_Role", ThisKey="RolesIdRoles", OtherKey="IdRoles", IsForeignKey=true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if ((previousValue != value) || (this._Role.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Role.Entity = null;
                        previousValue.ComUsuarios.Remove(this);
                    }
                    this._Role.Entity = value;
                    if (value != null)
                    {
                        this._RolesIdRoles = value.IdRoles;
                        value.ComUsuarios.Add(this);
                    }
                    else
                    {
                        this._RolesIdRoles = default(int);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MyappContext.CompBitacora in the schema.
    /// </summary>
    [Table(Name = @"myapp.comp_bitacora")]
    public partial class CompBitacora : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdCompBitacora;

        private string _CompCliente;

        private System.Nullable<System.DateTime> _CompFecha;

        private string _CompNumeroVisitaMes;

        private string _CompEquipo;

        private string _CompUsuario;

        private string _CompInforme;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCompBitacoraChanging(int value);
        partial void OnIdCompBitacoraChanged();
        partial void OnCompClienteChanging(string value);
        partial void OnCompClienteChanged();
        partial void OnCompFechaChanging(System.Nullable<System.DateTime> value);
        partial void OnCompFechaChanged();
        partial void OnCompNumeroVisitaMesChanging(string value);
        partial void OnCompNumeroVisitaMesChanged();
        partial void OnCompEquipoChanging(string value);
        partial void OnCompEquipoChanged();
        partial void OnCompUsuarioChanging(string value);
        partial void OnCompUsuarioChanged();
        partial void OnCompInformeChanging(string value);
        partial void OnCompInformeChanged();
        #endregion

        public CompBitacora()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCompBitacora in the schema.
        /// </summary>
        [Column(Name = @"idComp_Bitacora", Storage = "_IdCompBitacora", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdCompBitacora
        {
            get
            {
                return this._IdCompBitacora;
            }
            set
            {
                if (this._IdCompBitacora != value)
                {
                    this.OnIdCompBitacoraChanging(value);
                    this.SendPropertyChanging();
                    this._IdCompBitacora = value;
                    this.SendPropertyChanged("IdCompBitacora");
                    this.OnIdCompBitacoraChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompCliente in the schema.
        /// </summary>
        [Column(Name = @"Comp_Cliente", Storage = "_CompCliente", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompCliente
        {
            get
            {
                return this._CompCliente;
            }
            set
            {
                if (this._CompCliente != value)
                {
                    this.OnCompClienteChanging(value);
                    this.SendPropertyChanging();
                    this._CompCliente = value;
                    this.SendPropertyChanged("CompCliente");
                    this.OnCompClienteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompFecha in the schema.
        /// </summary>
        [Column(Name = @"Comp_Fecha", Storage = "_CompFecha", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> CompFecha
        {
            get
            {
                return this._CompFecha;
            }
            set
            {
                if (this._CompFecha != value)
                {
                    this.OnCompFechaChanging(value);
                    this.SendPropertyChanging();
                    this._CompFecha = value;
                    this.SendPropertyChanged("CompFecha");
                    this.OnCompFechaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompNumeroVisitaMes in the schema.
        /// </summary>
        [Column(Name = @"Comp_NumeroVisitaMes", Storage = "_CompNumeroVisitaMes", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompNumeroVisitaMes
        {
            get
            {
                return this._CompNumeroVisitaMes;
            }
            set
            {
                if (this._CompNumeroVisitaMes != value)
                {
                    this.OnCompNumeroVisitaMesChanging(value);
                    this.SendPropertyChanging();
                    this._CompNumeroVisitaMes = value;
                    this.SendPropertyChanged("CompNumeroVisitaMes");
                    this.OnCompNumeroVisitaMesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompEquipo in the schema.
        /// </summary>
        [Column(Name = @"Comp_Equipo", Storage = "_CompEquipo", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompEquipo
        {
            get
            {
                return this._CompEquipo;
            }
            set
            {
                if (this._CompEquipo != value)
                {
                    this.OnCompEquipoChanging(value);
                    this.SendPropertyChanging();
                    this._CompEquipo = value;
                    this.SendPropertyChanged("CompEquipo");
                    this.OnCompEquipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompUsuario in the schema.
        /// </summary>
        [Column(Name = @"Comp_Usuario", Storage = "_CompUsuario", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompUsuario
        {
            get
            {
                return this._CompUsuario;
            }
            set
            {
                if (this._CompUsuario != value)
                {
                    this.OnCompUsuarioChanging(value);
                    this.SendPropertyChanging();
                    this._CompUsuario = value;
                    this.SendPropertyChanged("CompUsuario");
                    this.OnCompUsuarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CompInforme in the schema.
        /// </summary>
        [Column(Name = @"Comp_Informe", Storage = "_CompInforme", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CompInforme
        {
            get
            {
                return this._CompInforme;
            }
            set
            {
                if (this._CompInforme != value)
                {
                    this.OnCompInformeChanging(value);
                    this.SendPropertyChanging();
                    this._CompInforme = value;
                    this.SendPropertyChanged("CompInforme");
                    this.OnCompInformeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MyappContext.Role in the schema.
    /// </summary>
    [Table(Name = @"myapp.roles")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdRoles;

        private string _RolAdmin;

        private string _RolOperador;
        #pragma warning restore 0649

        private EntitySet<ComUsuario> _ComUsuarios;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdRolesChanging(int value);
        partial void OnIdRolesChanged();
        partial void OnRolAdminChanging(string value);
        partial void OnRolAdminChanged();
        partial void OnRolOperadorChanging(string value);
        partial void OnRolOperadorChanged();
        #endregion

        public Role()
        {
            this._ComUsuarios = new EntitySet<ComUsuario>(new Action<ComUsuario>(this.attach_ComUsuarios), new Action<ComUsuario>(this.detach_ComUsuarios));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdRoles in the schema.
        /// </summary>
        [Column(Name = @"idRoles", Storage = "_IdRoles", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdRoles
        {
            get
            {
                return this._IdRoles;
            }
            set
            {
                if (this._IdRoles != value)
                {
                    this.OnIdRolesChanging(value);
                    this.SendPropertyChanging();
                    this._IdRoles = value;
                    this.SendPropertyChanged("IdRoles");
                    this.OnIdRolesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RolAdmin in the schema.
        /// </summary>
        [Column(Name = @"Rol_Admin", Storage = "_RolAdmin", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string RolAdmin
        {
            get
            {
                return this._RolAdmin;
            }
            set
            {
                if (this._RolAdmin != value)
                {
                    this.OnRolAdminChanging(value);
                    this.SendPropertyChanging();
                    this._RolAdmin = value;
                    this.SendPropertyChanged("RolAdmin");
                    this.OnRolAdminChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RolOperador in the schema.
        /// </summary>
        [Column(Name = @"Rol_Operador", Storage = "_RolOperador", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string RolOperador
        {
            get
            {
                return this._RolOperador;
            }
            set
            {
                if (this._RolOperador != value)
                {
                    this.OnRolOperadorChanging(value);
                    this.SendPropertyChanging();
                    this._RolOperador = value;
                    this.SendPropertyChanged("RolOperador");
                    this.OnRolOperadorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComUsuarios in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Role_ComUsuario", Storage="_ComUsuarios", ThisKey="IdRoles", OtherKey="RolesIdRoles", DeleteRule="NO ACTION")]
        public EntitySet<ComUsuario> ComUsuarios
        {
            get
            {
                return this._ComUsuarios;
            }
            set
            {
                this._ComUsuarios.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ComUsuarios(ComUsuario entity)
        {
            this.SendPropertyChanging("ComUsuarios");
            entity.Role = this;
        }
    
        private void detach_ComUsuarios(ComUsuario entity)
        {
            this.SendPropertyChanging("ComUsuarios");
            entity.Role = null;
        }
    }

}
