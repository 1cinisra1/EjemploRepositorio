@model WebApplication.Models.cli_cliente



@{
    ViewBag.Title = "Agregar Empresa";
    ViewBag.Subtitle = "Empresas";
    ViewBag.Home = "Home";
}
@if (ViewBag.Verificar is Int32)
{
<div class="register-box">
    <div class="register-box-body">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h3 style="text-align:center">EMPRESA</h3>
                <hr />
                @Html.ValidationSummary(true)

                <div class="form-group">
                    <label for="inputEmail3" class=" required col-sm-3 control-label">Nombre</label>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Cli_Nombre, new { htmlAttributes = new { @class = "form-control form-control-rounded", required = "required"} })
                        @Html.ValidationMessageFor(model => model.Cli_Nombre, null, new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label for="inputEmail3" class=" required col-sm-3 control-label">Ruc</label>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Cli_Ruc, new { htmlAttributes = new { @class = "form-control form-control-rounded", required = "required", id = "cedVal",type="number" } })
                        @Html.ValidationMessageFor(model => model.Cli_Ruc, null, new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label for="inputEmail3" class="col-sm-3 control-label">Dirección</label>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Cli_Direccion, new { htmlAttributes = new { @class = "form-control form-control-rounded"} })
                        @Html.ValidationMessageFor(model => model.Cli_Direccion)
                    </div>
                </div>

                <div class="form-group">
                    <label for="inputEmail3" class="col-sm-3 control-label">Teléfono</label>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Cli_Tel, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                        @Html.ValidationMessageFor(model => model.Cli_Tel)
                    </div>
                </div>

                <div class="form-group">
                    <label for="inputEmail3" class="col-sm-3 control-label">Ciudad</label>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Cli_Ciudad, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                        @Html.ValidationMessageFor(model => model.Cli_Ciudad)
                    </div>
                </div>

                <div class="form-group">
                    <label for="inputEmail3" class=" required col-sm-3 control-label">Razón Social</label>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Cli_RSocial, new { htmlAttributes = new { @class = "form-control form-control-rounded", required = "required" } })
                        @Html.ValidationMessageFor(model => model.Cli_RSocial, null, new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label for="inputEmail3" class="col-sm-3 control-label">Contacto</label>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Cli_NombContacto, new { htmlAttributes = new { @class = "form-control form-control-rounded" } })
                        @Html.ValidationMessageFor(model => model.Cli_NombContacto)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-3 col-md-8">
                        <button type="submit" class="btn btn-success" onclick="ValidarCed()">Guardar</button>
                        @Html.ActionLink("Volver", "Index", null, new { @class = "btn btn-danger" })
                    </div>
                </div>
            </div>
        }

        <div>

        </div>
    </div>
</div>
}

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">
    function ValidarCed() {

        cedula = document.getElementById("cedVal").value;
        if (cedula.length == 13) {

            //Obtenemos el digito de la region que sonlos dos primeros digitos
            digito_region = cedula.substring(0, 2);

            digito_once = cedula.substring(10, 11);
            digito_doce = cedula.substring(11, 12);
            digito_trece = cedula.substring(12, 13);

            //Pregunto si la region existe ecuador se divide en 24 regiones
            if (digito_region >= 1 && digito_region <= 24) {

                // Extraigo el ultimo digito
                ultimo_digito = cedula.substring(9, 10);

                //Agrupo todos los pares y los sumo
                pares = parseInt(cedula.substring(1, 2)) + parseInt(cedula.substring(3, 4)) + parseInt(cedula.substring(5, 6)) + parseInt(cedula.substring(7, 8));

                //Agrupo los impares, los multiplico por un factor de 2, si la resultante es > que 9 le restamos el 9 a la resultante
                numero1 = cedula.substring(0, 1);
                numero1 = (numero1 * 2);
                if (numero1 > 9) { var numero1 = (numero1 - 9); }

                numero3 = cedula.substring(2, 3);
                numero3 = (numero3 * 2);
                if (numero3 > 9) { var numero3 = (numero3 - 9); }

                numero5 = cedula.substring(4, 5);
                numero5 = (numero5 * 2);
                if (numero5 > 9) { var numero5 = (numero5 - 9); }

                numero7 = cedula.substring(6, 7);
                numero7 = (numero7 * 2);
                if (numero7 > 9) { var numero7 = (numero7 - 9); }

                numero9 = cedula.substring(8, 9);
                numero9 = (numero9 * 2);
                if (numero9 > 9) { var numero9 = (numero9 - 9); }

                impares = numero1 + numero3 + numero5 + numero7 + numero9;

                //Suma total
                suma_total = (pares + impares);

                //extraemos el primero digito
                primer_digito_suma = String(suma_total).substring(0, 1);

                //Obtenemos la decena inmediata
                decena = (parseInt(primer_digito_suma) + 1) * 10;

                //Obtenemos la resta de la decena inmediata - la suma_total esto nos da el digito validador
                digito_validador = decena - suma_total;

                //Si el digito validador es = a 10 toma el valor de 0
                if (digito_validador == 10)
                    digito_validador = 0;

                //Validamos que el digito validador sea igual al de la cedula
                if (digito_validador == ultimo_digito && digito_once == 0 && digito_doce == 0 && digito_trece == 1) {
                    //alert('la cedula:' + cedula + ' es correcta');
                    //alert('el ruc:' + cedula + ' es correcto');
                } else {
                    alert('el ruc:' + cedula + ' ingresado es incorrecto');
                }

            } else {
                // imprimimos en consola si la region no pertenece
                alert('Este ruc no pertenece a ninguna región');
            }
        } else {
            //imprimimos en consola si la cedula tiene mas o menos de 10 digitos
            alert('Este ruc no consta de 13 Dígitos');
        }
    }

</script>

<style type="text/css">
    .form-control-rounded {
        border-radius: 16px;
    }

    .required::after {
        content: "*";
        font-weight: normal;
        color: red;
        font-size: large;
    }
</style>

